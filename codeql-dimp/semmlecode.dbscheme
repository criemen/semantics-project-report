
@exprparent = @stmt | @expr | @bexpr;

types(
  unique int id: @type,
  string nodeName: string ref
);

literals(
  unique int parent: @expr ref,
  int value: int ref
);

phinodes(
  unique int id: @phinode,
  int parent: @stmt ref,
  int assignedvar: @variable ref,
  int firstvar: @variable ref,
  int secondvar: @variable ref
);

vars(
  unique int id: @variable,
  string nodeName: string ref,
  int typeid: @type ref
);

variableread(
  unique int expr: @varaccess ref,
  int variable: @variable ref
);

variableassign(
  unique int assign: @assign ref,
  int variable: @variable ref
);


stmtparents(
    int parent: @stmt ref,
    int child: @stmt ref,
    int idx: int ref
);

stmts(
  unique int id: @stmt,
  int kind: int ref
);

exprparents(
    int parent: @exprparent ref,
    int child: @expr ref,
    int idx: int ref
);

exprs(
  unique int id: @expr,
  int kind: int ref,
  int typeid: @type ref
);

case @expr.kind of
   1  = @intliteral
|  2  = @addexpr
|  3  = @subexpr
|  4  = @mulexpr
|  5  = @varaccess
|  6  = @sourceexpr
;

@binaryexpr = 
 @addexpr
 | @subexpr
 | @mulexpr

boolexprs(
  unique int id: @bexpr,
  int kind: int ref
);

@bexprparent = @stmt | @bexpr

bexprparents(
    int parent: @bexprparent ref,
    int child: @bexpr ref,
    int idx: int ref
);

boolliterals(
  unique int parent: @bexpr ref,
  int value: int ref
);

case @bexpr.kind of
  1 = @boolliteral
| 2 = @beq
| 3 = @bleq
| 4 = @bneg
| 5 = @band
;

case @stmt.kind of
  0 = @skip
| 1 = @assign
| 2 = @seq
| 3 = @ifstmt
| 4 = @whilestmt
| 5 = @sink
;

// needed for compatibility with CodeQL tooling
sourceLocationPrefix(
  string prefix : string ref
);
